/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sam;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.awt.*;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import java.io.File;
import javax.swing.table.DefaultTableCellRenderer;
import org.jdesktop.xswingx.PromptSupport;
/**
 *
 * @author Sanatan Home
 */
public class glance extends javax.swing.JPanel {

    /**
     * Creates new form glance
     */
    
    public glance() {
        initComponents();
        jPanel2.setVisible(false);
        update();
        PromptSupport.setPrompt("Subject", jTextField2);
//        PromptSupport.setPrompt("Your Message...", jEditorPane1);
    }
    
    
    void update(){
        Connection con; 
        ResultSet rs;
        jComboBox1.removeAllItems();
        jComboBox3.removeAllItems();
        jComboBox5.removeAllItems();
        try {
            con=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_manager","sam_user","pass_sam");
            Statement stmt=con.createStatement();
            rs=stmt.executeQuery("Select * from SERVICE");
           
            while(rs.next()){
                boolean found=false;
                for(int i=0;i<jComboBox1.getItemCount();i++){
                    if(jComboBox1.getItemAt(i).equals(rs.getString("CLASS_NAME"))){
                       found=true; 
                    }
                }
                if(!found){
                    jComboBox1.addItem(rs.getString("CLASS_NAME"));
                    jComboBox3.addItem(rs.getString("CLASS_NAME"));
                    jComboBox5.addItem(rs.getString("CLASS_NAME"));
                }
            }
            rs.close();
            stmt.close();
            con.close();
        }
        catch(SQLException err){
            System.out.println("Error_packages11206_fr::"+err.getMessage());
        }
        
        update_names(String.valueOf(jComboBox1.getItemAt(0))); 
    }

    void update_names(String class_name){
        List<String> package_names=new ArrayList<String>();
        jComboBox2.removeAllItems();
        Connection con; 
        ResultSet rs;
        try {
            con=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_manager","sam_user","pass_sam");
            Statement stmt=con.createStatement();
            rs=stmt.executeQuery("Select * from SERVICE");
            int i=0;
            while(rs.next()){
                if(rs.getString("CLASS_NAME").equalsIgnoreCase(class_name)){
                    package_names.add(rs.getString("PACKAGE_NAME"));
                    i++;
                }
            }
            rs.close();
            stmt.close();
            con.close();
        }
        catch(SQLException err){
            System.out.println("Error_packages1207_fr::"+err.getMessage());
        }
        
        try {
            con=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_package","sam_user1","pass_sam");
            Statement stmt=con.createStatement();
            
            for(int i=0;i<package_names.size();i++){
                rs=stmt.executeQuery("Select * from "+package_names.get(i));
                
                while(rs.next()){
                    jComboBox2.addItem(rs.getString("roll")+"           "+rs.getString("name"));
                }
                rs.close();
            }
            stmt.close();
            con.close();
        }
        catch(SQLException err){
            System.out.println("Error_packages1208_fr::"+err.getMessage());
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jComboBox4 = new javax.swing.JComboBox();
        jLabel25 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jTextField1 = new javax.swing.JTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jTextField2 = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jRadioButton3 = new javax.swing.JRadioButton();
        jTextField4 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jComboBox5 = new javax.swing.JComboBox();
        jComboBox6 = new javax.swing.JComboBox();
        jTextField3 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel22.setFont(new java.awt.Font("Segoe UI Semilight", 1, 16)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(55, 150, 198));
        jLabel22.setText("Class Name");

        jLabel23.setFont(new java.awt.Font("Segoe UI Semilight", 1, 16)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(55, 150, 198));
        jLabel23.setText("Student Name:");

        jComboBox2.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        jComboBox2.setMaximumRowCount(15);
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All" }));
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jComboBox1.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(335, 335, 335))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 1001, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(350, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel5MouseClicked(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Segoe UI Semilight", 1, 16)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(55, 150, 198));
        jLabel24.setText("Class Name");

        jComboBox3.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All" }));
        jComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Roll", "Student Name", "Total Days", "Present Days", "%", "Mark"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable2.setShowGrid(false);
        jTable2.setShowVerticalLines(true);
        jTable2.setGridColor(new java.awt.Color(204, 204, 204));
        jTable2.setRowHeight(25);
        /*jTable2.setOpaque(true);
        jTable2.setFillsViewportHeight(true);
        jTable2.setBackground(new Color(255, 255, 255));
        jTable2.getTableHeader().setBackground(new Color(255, 255, 255));*/
        jScrollPane3.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setMinWidth(150);
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(150);
            jTable2.getColumnModel().getColumn(0).setMaxWidth(150);
            jTable2.getColumnModel().getColumn(1).setMinWidth(180);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(180);
            jTable2.getColumnModel().getColumn(1).setMaxWidth(180);
            jTable2.getColumnModel().getColumn(4).setMinWidth(60);
            jTable2.getColumnModel().getColumn(4).setPreferredWidth(60);
            jTable2.getColumnModel().getColumn(4).setMaxWidth(60);
            jTable2.getColumnModel().getColumn(5).setMinWidth(40);
            jTable2.getColumnModel().getColumn(5).setPreferredWidth(40);
            jTable2.getColumnModel().getColumn(5).setMaxWidth(40);
        }

        jComboBox4.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Segoe UI Semilight", 1, 16)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(55, 150, 198));
        jLabel25.setText("Month");

        jLabel5.setBackground(new java.awt.Color(55, 150, 198));
        jLabel5.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        jLabel5.setForeground(java.awt.Color.white);
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Get Copy of Record in PDF");
        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel5.setOpaque(true);
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(55, 150, 198));
        jLabel6.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        jLabel6.setForeground(java.awt.Color.white);
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Forward Record to above email");
        jLabel6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel6.setOpaque(true);
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel6MouseEntered(evt);
            }
        });

        jLabel7.setBackground(new java.awt.Color(55, 150, 198));
        jLabel7.setFont(new java.awt.Font("Segoe UI Semilight", 0, 16)); // NOI18N
        jLabel7.setForeground(java.awt.Color.white);
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Mail to selected Students with above note");
        jLabel7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel7.setOpaque(true);
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jEditorPane1);

        jTextField1.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N

        jRadioButton1.setBackground(new java.awt.Color(255, 255, 255));
        jRadioButton1.setFont(new java.awt.Font("Segoe UI Semilight", 0, 11)); // NOI18N
        jRadioButton1.setText("Mark All");
        jRadioButton1.setFocusable(false);
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setBackground(new java.awt.Color(255, 255, 255));
        jRadioButton2.setFont(new java.awt.Font("Segoe UI Semilight", 0, 11)); // NOI18N
        jRadioButton2.setText("Unmark All");
        jRadioButton2.setFocusable(false);
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jCheckBox1.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox1.setFont(new java.awt.Font("Segoe UI Semilight", 0, 11)); // NOI18N
        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Include Attendance");

        jTextField2.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N

        jPanel7.setOpaque(false);

        jRadioButton3.setBackground(new java.awt.Color(255, 255, 255));
        jRadioButton3.setFont(new java.awt.Font("Segoe UI Semilight", 0, 11)); // NOI18N
        jRadioButton3.setText("Mark all having less than");
        jRadioButton3.setFocusable(false);
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jTextField4.setEditable(false);
        jTextField4.setFont(new java.awt.Font("Segoe UI Semilight", 0, 11)); // NOI18N
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField4KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField4KeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI Semilight", 0, 11)); // NOI18N
        jLabel1.setText("%");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jRadioButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jRadioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel1))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(jRadioButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jRadioButton2))
                                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(jScrollPane3))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(jCheckBox1))
                .addGap(30, 30, 30))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addComponent(jLabel25)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jComboBox4))
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addGap(28, 28, 28)
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jComboBox3)
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                            .addGap(5, 5, 5)
                                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)))
                .addContainerGap())
        );

        buttonGroup1.add(jRadioButton1);
        buttonGroup1.add(jRadioButton2);
        buttonGroup1.add(jRadioButton3);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));

        jTable3.setFont(new java.awt.Font("Segoe UI Semilight", 0, 16)); // NOI18N
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Roll", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "Total", "Prsnt", "%"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.setGridColor(new java.awt.Color(204, 204, 204));
        jTable3.setShowGrid(false);
        jTable3.setShowVerticalLines(true);
        jTable3.setRowHeight(22);
        jScrollPane2.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(0).setMinWidth(110);
            jTable3.getColumnModel().getColumn(0).setPreferredWidth(110);
            jTable3.getColumnModel().getColumn(0).setMaxWidth(110);
            jTable3.getColumnModel().getColumn(32).setMinWidth(40);
            jTable3.getColumnModel().getColumn(32).setPreferredWidth(40);
            jTable3.getColumnModel().getColumn(32).setMaxWidth(40);
            jTable3.getColumnModel().getColumn(33).setMinWidth(40);
            jTable3.getColumnModel().getColumn(33).setPreferredWidth(40);
            jTable3.getColumnModel().getColumn(33).setMaxWidth(40);
            jTable3.getColumnModel().getColumn(34).setMinWidth(40);
            jTable3.getColumnModel().getColumn(34).setPreferredWidth(40);
            jTable3.getColumnModel().getColumn(34).setMaxWidth(40);
        }

        jComboBox5.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        jComboBox5.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox5ItemStateChanged(evt);
            }
        });
        jComboBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox5ActionPerformed(evt);
            }
        });

        jComboBox6.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        jComboBox6.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox6ItemStateChanged(evt);
            }
        });
        jComboBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 981, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                .addContainerGap())
        );

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setBackground(new java.awt.Color(55, 150, 198));
        jLabel2.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        jLabel2.setForeground(java.awt.Color.white);
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Glance Individually");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.setOpaque(true);
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(55, 150, 198));
        jLabel3.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        jLabel3.setForeground(java.awt.Color.white);
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Share Info");
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel3.setOpaque(true);
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        jLabel8.setBackground(new java.awt.Color(55, 150, 198));
        jLabel8.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        jLabel8.setForeground(java.awt.Color.white);
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Glance over a class");
        jLabel8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel8.setOpaque(true);
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sam/images/eye-154867_960_720.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(210, 210, 210)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jLabel4)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged

    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        update_names(String.valueOf(jComboBox1.getSelectedItem()));
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        String class_name=String.valueOf(jComboBox1.getSelectedItem());
        
        String student=String.valueOf(jComboBox2.getSelectedItem());
        if(student.indexOf(' ')>=0){
            String student_key=student.substring(0, student.indexOf(' '));

            jPanel2.removeAll();
            jPanel2.repaint();
            jPanel4.setBounds(0, 7, 1000, 63);
            jPanel2.add(jPanel4);
            
            find_record panel=new find_record(class_name,student_key);
            System.out.println("calling find_record:: "+class_name+" : "+student_key);
            panel.setBounds(0, 75, 1000, 345);
            jPanel2.add(panel);
            this.revalidate();
        }else{
        }        
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        
        jPanel1.remove(jPanel5);
        jPanel1.remove(jLabel4);
        jPanel1.remove(jPanel6);
        
        this.repaint();
        jPanel2.setBounds(0,70,1010,424);
        update();
        jPanel2.setVisible(true);
        jPanel1.add(jPanel2);
        this.revalidate();
        
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox3ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3ItemStateChanged
    
    //stores important tables to reference later
    List<String> table_list = new ArrayList<String>();
    
    //name of month is listed in mnth combobox... user can select month
    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // TODO add your handling code here:
        jComboBox4.removeAllItems();
        String class_name=String.valueOf(jComboBox3.getSelectedItem());
     
        List<String> package_names=new ArrayList<String>();
        table_list.clear();
        
        Connection con; 
        ResultSet rs;
        try {
            
            //select the names of all related packages and stores it in a list
            con=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_manager","sam_user","pass_sam");
            Statement stmt=con.createStatement();
            rs=stmt.executeQuery("Select PACKAGE_NAME from service where class_name='"+class_name+"'");
            while(rs.next()){
                package_names.add(rs.getString("PACKAGE_NAME"));
            }
            //=============end of selection==============//
            
            //data from each listed packages will be retrieved 
            con=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_record","sam_user","pass_sam");
            DatabaseMetaData dbm = con.getMetaData();
            String[] types={"TABLE"};

            for(int i=0;i<package_names.size();i++){
                rs=dbm.getTables(null, null, package_names.get(i)+"%", types);
                while(rs.next()){
                    String table=rs.getString(3);
                    //retrieving month from package name to list it in combobox
                    String mnth=month(Integer.valueOf(table.substring(table.length()-4, table.length()-2)));
                    boolean found=false;
                    
                    //checking combobox wether the month is already present or not
                    for(int j=0;j<jComboBox4.getItemCount();j++){
                        if(jComboBox4.getItemAt(j).equals(mnth)){
                           found=true; //if month found make it true
                        }
                    }
                    //if mnth not found
                    if(!found){
                        jComboBox4.addItem(mnth);//add month to combobox
                    }
                    //table is added to table_list to reference it later
                    table_list.add(table);
                }
            }
            rs.close();
            stmt.close();
            con.close();
        }
        catch(SQLException err){
            System.out.println("Error_packages1209_fr3::"+err.getMessage());
        }
        
        //record will be updated in jtable2 to display 
        DefaultTableModel model=(DefaultTableModel) jTable2.getModel();
        model.setNumRows(0);
        String mnth=month_index(String.valueOf(jComboBox4.getSelectedItem()));
        for(int i=0;i<table_list.size();i++){
            //check wether the table name in table_list have mnth index
            if(table_list.get(i).substring(table_list.get(i).length()-4, table_list.get(i).length()-2).equals(mnth)){
                //record will be fetched from the table name listed in table_list
                fetch_record(table_list.get(i));
            }
        }
        
        jTable2.setDefaultRenderer(Object.class, new myNewTableCellRenderer());
        alignCenter(jTable2,2,3);
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model=(DefaultTableModel) jTable2.getModel();
        model.setNumRows(0);
        String mnth=month_index(String.valueOf(jComboBox4.getSelectedItem()));
        for(int i=0;i<table_list.size();i++){
            if(table_list.get(i).substring(table_list.get(i).length()-4, table_list.get(i).length()-2).equals(mnth)){
                fetch_record(table_list.get(i));
            }
        }
        
        jTable2.setDefaultRenderer(Object.class, new myNewTableCellRenderer());
        alignCenter(jTable2,2,3);
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void alignCenter(JTable table, int... column) {
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
        
        for(int col:column){
            table.getColumnModel().getColumn(col).setCellRenderer(centerRenderer);
        }
    }
    private void jPanel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel5MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jPanel5MouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
        jPanel1.remove(jPanel2);
        jPanel1.remove(jLabel4);
        jPanel1.remove(jPanel6);
        this.repaint();
        jPanel5.setBounds(0,70,1010,424);
        update();

        jPanel5.setVisible(true);
        jPanel1.add(jPanel5);
        this.revalidate();
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        jTextField4.setEditable(false);
        DefaultTableModel model=(DefaultTableModel) jTable2.getModel();
        for(int i=0;i<model.getRowCount();i++){
            model.setValueAt(true, i, 5);
        }
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
        jTextField4.setEditable(false);
        DefaultTableModel model=(DefaultTableModel) jTable2.getModel();
        for(int i=0;i<model.getRowCount();i++){
            model.setValueAt(false, i, 5);
        }
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        // TODO add your handling code here:
        new create_pdf().start();
    }//GEN-LAST:event_jLabel5MouseClicked

    boolean isEmailValid(String email){
        String regex = "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(email);
        if(matcher.matches()){
            return true;
        }else{
            return false;
        }
    }
    
    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        // TODO add your handling code here:
        if (isEmailValid(jTextField1.getText())){
            jLabel6.setText("Sending Mail...");
            jLabel6.setForeground(new Color(55,150,198));
            jLabel6.setBackground(Color.white);
            jLabel6.setIcon(new ImageIcon(getClass().getResource("images/ring-alt.gif")));
            new send_pdf().start();
        }else{
            JOptionPane.showMessageDialog(this, "The provided email is not valid!");
        }
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel6MouseEntered

    boolean SENDING_MAIL=false;
    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        // TODO add your handling code here:
            if(!SENDING_MAIL){
                SENDING_MAIL=true;
                if(!jTextField2.getText().equals("")){
                    if(jCheckBox1.isSelected()){
                        String[] options = new String[]{"OK", "Cancel"};
                        if(JOptionPane.showOptionDialog(null, "Please keep patience!\nyou have selected to attach the attendance of each student, it will take some time ","Warning",
                                JOptionPane.INFORMATION_MESSAGE, JOptionPane.INFORMATION_MESSAGE,
                                null, options, options[0])==JOptionPane.YES_OPTION){
                                jLabel7.setText("Sending Mail...");
                                jLabel7.setForeground(new Color(55,150,198));
                                jLabel7.setBackground(Color.white);
                                jLabel7.setIcon(new ImageIcon(getClass().getResource("images/ring-alt.gif")));
                                jTextField2.setEditable(false);
                                jEditorPane1.setEditable(false);
                                jCheckBox1.setEnabled(false);
                                new send_all().start();
                        }
                    }else{
                        jLabel7.setText("Sending Mail...");
                        jLabel7.setForeground(new Color(55,150,198));
                        jLabel7.setBackground(Color.white);
                        jLabel7.setIcon(new ImageIcon(getClass().getResource("images/ring-alt.gif")));
                        jTextField2.setEditable(false);
                        jEditorPane1.setEditable(false);
                        jCheckBox1.setEnabled(false);
                        new send_all().start();
                    }
                }else{
                    JOptionPane.showMessageDialog(this, "Please give a subject to your mail!");
                }
            }
    }//GEN-LAST:event_jLabel7MouseClicked

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        // TODO add your handling code here:
         
        jPanel1.remove(jPanel5);
        jPanel1.remove(jLabel4);
        jPanel1.remove(jPanel2);
        this.repaint();
        
        jPanel6.setBounds(0,50,1010,450);
        update();
        jPanel6.setVisible(true);
        jPanel1.add(jPanel6);
        this.revalidate();
        jComboBox5ActionPerformed(null);
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jComboBox5ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox5ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox5ItemStateChanged
    
    List<String> package_names=new ArrayList<String>();
    
    private void jComboBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox5ActionPerformed
        // TODO add your handling code here:
        package_names.clear();
        table_list.clear();
        jComboBox6.removeAll();
        String class_name=String.valueOf(jComboBox5.getSelectedItem());
        Connection con;
        ResultSet rs;
        try {
            //select the names of all related packages and stores it in a list
            con=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_manager","sam_user","pass_sam");
            Statement stmt=con.createStatement();
            rs=stmt.executeQuery("Select PACKAGE_NAME from service where class_name='"+class_name+"'");
            while(rs.next()){
                package_names.add(rs.getString("PACKAGE_NAME"));
            }
            con=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_record","sam_user","pass_sam");
            DatabaseMetaData dbm = con.getMetaData();
            String[] types={"TABLE"};

            for(int i=0;i<package_names.size();i++){
                rs=dbm.getTables(null, null, package_names.get(i)+"%", types);
                while(rs.next()){
                    String table=rs.getString(3);
                    //retrieving month from package name to list it in combobox
                    String mnth=month(Integer.valueOf(table.substring(table.length()-4, table.length()-2)));
                    boolean found=false;

                    //checking combobox wether the month is already present or not
                    for(int j=0;j<jComboBox6.getItemCount();j++){
                        if(jComboBox6.getItemAt(j).equals(mnth)){
                            found=true; //if month found make it true
                        }
                    }
                    //if mnth not found
                    if(!found){
                        jComboBox6.addItem(mnth);//add month to combobox
                    }
                    jComboBox6.revalidate();
                    //table is added to table_list to reference it later
                    table_list.add(table);
                }
            }
            rs.close();
            stmt.close();
            con.close();
        }
        catch(SQLException err){
            System.out.println("Error_packages1209_fr3::"+err.getMessage());
        }
        load_record();        
        jTable3.setDefaultRenderer(Object.class, new myTableCellRenderer());
    }//GEN-LAST:event_jComboBox5ActionPerformed

    private void jComboBox6ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox6ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox6ItemStateChanged

    private void jComboBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox6ActionPerformed
        // TODO add your handling code here:
        jComboBox5ActionPerformed(null);
    }//GEN-LAST:event_jComboBox6ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // TODO add your handling code here:
        jTextField4.setEditable(true);
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField4KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyTyped
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jTextField4KeyTyped

    private void jTextField4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyReleased
        // TODO add your handling code here:
        String str=jTextField4.getText();
        try{
            int percentage=Integer.valueOf(str);
            if(percentage>0 && percentage<=100){
                DefaultTableModel model=(DefaultTableModel) jTable2.getModel();
                for(int i=0;i<model.getRowCount();i++){
                    if(Integer.valueOf(String.valueOf(model.getValueAt(i, 4)))<percentage){
                        model.setValueAt(true, i, 5);
                    }else{
                        model.setValueAt(false, i, 5);
                    }
                }
            }else{
                jTextField4.setText(str.substring(0,str.length()-1));
                JOptionPane.showMessageDialog(this,"Percentage must be greater than 0% and less than or equals to 100%!");
            }
        }catch(Exception e){
            if(!str.equals("")){
                JOptionPane.showMessageDialog(this,"Only numbers allowed!");
                jTextField4.setText(str.substring(0,str.length()-1));
            }
        }
    }//GEN-LAST:event_jTextField4KeyReleased
       
    void load_record(){
        DefaultTableModel model=(DefaultTableModel) jTable3.getModel();
        model.setNumRows(0);
        int today=Integer.valueOf(new SimpleDateFormat("dd").format(new Date()));
        String mnth=month_index(String.valueOf(jComboBox6.getSelectedItem()));
        Connection con;
        ResultSet rs;
        try {
            
            con=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_record","sam_user","pass_sam");
            Statement stmt=con.createStatement();
            
            for(int i=0;i<package_names.size();i++){
                String date_string=mnth+new SimpleDateFormat("yy").format(new Date());
                String table_name=package_names.get(i)+date_string;
                
                DatabaseMetaData dbm=con.getMetaData();
                rs=dbm.getTables(null, null, "%", new String[] {"TABLE"});
                boolean found=false;
        
                while(rs.next()){
                    if(rs.getString(3).equals(table_name)){
                        found=true;
                        System.out.println("found: "+rs.getString(3));
                    }
                }
                if(found){
                    
                    rs=stmt.executeQuery("select * from "+table_name);
                    while(rs.next()){
                        String percentage="";
                        try{
                            percentage=String.valueOf((int)((float)rs.getInt("PRESENT_DAYS")/(float)rs.getInt("TOTAL_DAYS")*100));
                        }catch(Exception e){
                            percentage="100";
                        }
                        
                        String remark[]=new String[31];
                        for(int j=0;j<31;j++){
                            if(rs.getString("DAY"+String.valueOf(j+1)).equals("n")){
                                if(Integer.valueOf(new SimpleDateFormat("MM").format(new Date()))==Integer.valueOf(mnth)){
                                    if(today<=j+1){
                                        remark[j]="_";
                                    }else{
                                        remark[j]="x";
                                    }
                                }else{
                                    remark[j]="x";
                                }
                            }else{
                                remark[j]=rs.getString("DAY"+String.valueOf(j+1)).toUpperCase();
                            }
                        }
                        model.addRow(new Object[]{rs.getString("roll"),
                                remark[0],
                                remark[1],
                                remark[2],
                                remark[3],
                                remark[4],
                                remark[5],
                                remark[6],
                                remark[7],
                                remark[8],
                                remark[9],
                                remark[10],
                                remark[11],
                                remark[12],
                                remark[13],
                                remark[14],
                                remark[15],
                                remark[16],
                                remark[17],
                                remark[18],
                                remark[19],
                                remark[20],
                                remark[21],
                                remark[22],
                                remark[23],
                                remark[24],
                                remark[25],
                                remark[26],
                                remark[27],
                                remark[28],
                                remark[29],
                                remark[30],
                                rs.getString("MNTH_TOTAL_DAYS"),rs.getString("MNTH_PRESENT_DAYS"),percentage});
                    }
                }
                else{
                    JOptionPane.showMessageDialog(this, "Record not found");
                }
            }
            stmt.close();
            con.close();
        }
        catch(SQLException err){
            System.out.println("Error_packages1_fr3::"+err.getMessage());
        }
    }
    
    void fetch_record(String table){
        Connection con; 
        ResultSet rs;
        try {
            con=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_record","sam_user","pass_sam");
            Statement stmt=con.createStatement();
            
            DefaultTableModel model=(DefaultTableModel) jTable2.getModel();
            int t_days;    
            int p_days;    
            rs=stmt.executeQuery("Select roll,name,mnth_total_days,mnth_present_days from "+table);
            while(rs.next()){
                t_days=Integer.valueOf(rs.getString("mnth_total_days"));
                p_days=Integer.valueOf(rs.getString("mnth_present_days"));
                String percentage;
                if(t_days>0){
                    percentage=String.valueOf(p_days*100/t_days);
                }else{
                    percentage="0";
                }
                model.addRow(new Object[]{rs.getString("roll"),rs.getString("name"),t_days,p_days,percentage,true});
            }
            rs.close();
            stmt.close();
            con.close();
        }
        catch(SQLException err){
            System.out.println("Error_packages1210_fr3::"+err.getMessage());
        }
    }
    
    String month_index(String month){
        if(month.equalsIgnoreCase("January")){
            return "01";
        }else if(month.equalsIgnoreCase("February")){
            return "02";
        }else if(month.equalsIgnoreCase("March")){
            return "03";
        }else if(month.equalsIgnoreCase("April")){
            return "04";
        }else if(month.equalsIgnoreCase("May")){
            return "05";
        }else if(month.equalsIgnoreCase("June")){
            return "06";
        }else if(month.equalsIgnoreCase("July")){
            return "07";
        }else if(month.equalsIgnoreCase("August")){
            return "08";
        }else if(month.equalsIgnoreCase("September")){
            return "09";
        }else if(month.equalsIgnoreCase("October")){
            return "10";
        }else if(month.equalsIgnoreCase("November")){
            return "11";
        }else if(month.equalsIgnoreCase("December")){
            return "12";
        }else{
            return "00";
        }
    }
    
    String month(int i){
        if(i==1){
            return "January";
        }else if(i==2){
            return "February";
        }else if(i==3){
            return "March";
        }else if(i==4){
            return "April";
        }else if(i==5){
            return "May";
        }else if(i==6){
            return "June";
        }else if(i==7){
            return "July";
        }else if(i==8){
            return "August";
        }else if(i==9){
            return "September";
        }else if(i==10){
            return "October";
        }else if(i==11){
            return "November";
        }
        else if(i==12){
            return "December";
        }else{
            return null;
        }
    }
    
    
    
    //threads//////////////threads////
    class send_pdf extends Thread{
        public void run(){
            String class_name=String.valueOf(jComboBox3.getSelectedItem());
            String month=String.valueOf(jComboBox4.getSelectedItem());
            String to=jTextField1.getText();
            System.out.println("to:: "+to);
            if(setup_table_pdf(false, month, class_name)){
                jLabel6.setText("Forward Record to above email");
                jLabel6.setBackground(new Color(55,150,198));
                jLabel6.setForeground(Color.white);
                jLabel6.setIcon(new ImageIcon());
                
            }else{
                jLabel6.setText("Sending failed! retry?");
                jLabel6.setBackground(new Color(55,150,198));
                jLabel6.setForeground(Color.white);
                jLabel6.setIcon(new ImageIcon());
            }
        }
    }
    
    void sentMsg(){
        JOptionPane.showMessageDialog(this,"Mail Sent Successfully!\n An extra copy of record has been sent to your email for future references.");
    }
     
    class create_pdf extends Thread{
        public void run(){
            String class_name=String.valueOf(jComboBox3.getSelectedItem());
            String record_date=String.valueOf(jComboBox4.getSelectedItem());
            setup_table_pdf(true,record_date, class_name);
        }
    }
    
    class send_all extends Thread{
        public void run(){
            String class_name=String.valueOf(jComboBox3.getSelectedItem());
            String month=String.valueOf(jComboBox4.getSelectedItem());
            
            boolean sent;
            if(jCheckBox1.isSelected()){
                sent=bulk_send(class_name, month);
            }else{
                sent=bulk_sendCC(class_name, month);
            }
            if(sent){
                jLabel7.setText("Mail to selected Students with above note");
                jLabel7.setBackground(new Color(55,150,198));
                jLabel7.setForeground(Color.white);
                jLabel7.setIcon(new ImageIcon());
            }else{
                jLabel7.setText("Sending failed! retry?");
                jLabel7.setBackground(new Color(55,150,198));
                jLabel7.setForeground(Color.white);
                jLabel7.setIcon(new ImageIcon());
            }
            jTextField2.setEditable(true);
            jEditorPane1.setEditable(true);
            jCheckBox1.setEnabled(true);
            SENDING_MAIL=false;
        }
    }
    
    void sentMsg1(){
        JOptionPane.showMessageDialog(this, "Your request has been processed successfully!");
    }
    
    
    
    
    boolean bulk_sendCC(String class_name, String month){
        DefaultTableModel model=(DefaultTableModel)jTable2.getModel();
        String msg=jEditorPane1.getText()+"\n\nRegards,\n";
        String subject=jTextField2.getText();
        List<String> rolls=new ArrayList<>();
        List<String> emails=new ArrayList<>();
        
        Connection con; 
        ResultSet rs;
        try {
            con=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_manager","sam_user","pass_sam");
            Statement stmt=con.createStatement();
            //package name is collected from service table
            rs=stmt.executeQuery("select PACKAGE_NAME from SERVICE where CLASS_NAME='"+class_name+"'");
            List<String> packages=new ArrayList<>();
            while(rs.next()){
                packages.add(rs.getString("PACKAGE_NAME"));
            }

            //retrieveing the list of selected students... key is roll
            for(int i=0;i<model.getRowCount();i++){
                if(model.getValueAt(i, 4).equals(true)){
                    rolls.add(String.valueOf(model.getValueAt(i, 0)));
                }
            }

            //test print
            System.out.println("rolls: "+rolls);
        
            //roll of students is searched in package tables and email is collected in 'emails' list 
            con=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_package","sam_user1","pass_sam");
            stmt=con.createStatement();
            for(int i=0;i<rolls.size();i++){
                String roll=rolls.get(i);
                for(int k=0;k<packages.size();k++){
                    String package_name=packages.get(k);
                    rs=stmt.executeQuery("select email from "+package_name+" where roll='"+roll+"'");
                    while(rs.next()){
                        emails.add(rs.getString("email"));
                        System.out.println(rs.getString("email"));
                    }
                }
            }
            
            rs.close();
            stmt.close();
            con.close();
        }
        catch(SQLException err){
            System.out.println("Error_packages121_fr3::"+err.getMessage());
        }
    
        String status=new Mailer().sendMailCC(emails.toArray(), msg ,subject);
        if(status.equals("done")){
            return true;
        }else{
            JOptionPane.showMessageDialog(this, status);
            return false;
        }
    }
    
    boolean bulk_send(String class_name, String month){
        DefaultTableModel model=(DefaultTableModel)jTable2.getModel();
        String msg=jEditorPane1.getText();
        String subject=jTextField2.getText();
        List<String> rolls=new ArrayList<>();
        List<String> names=new ArrayList<>();
        List<String> emails=new ArrayList<>();
        List<String> body=new ArrayList<>();
        //important:: msg;infopacket;name(name of user);email(from);no. of mails to send in bulk(j);
        
        Connection con; 
        ResultSet rs;
        try {
            con=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_manager","sam_user","pass_sam");
            Statement stmt=con.createStatement();
            //package name is collected from service table
            rs=stmt.executeQuery("select PACKAGE_NAME from SERVICE where CLASS_NAME='"+class_name+"'");
            List<String> packages=new ArrayList<>();
            while(rs.next()){
                packages.add(rs.getString("PACKAGE_NAME"));
            }

            //retrieveing the list of selected students... key is roll
            for(int i=0;i<model.getRowCount();i++){
                if(model.getValueAt(i, 5).equals(true)){
                    rolls.add(String.valueOf(model.getValueAt(i, 0)));
                    names.add(String.valueOf(model.getValueAt(i, 1)));
                    body.add("Hello "+String.valueOf(model.getValueAt(i, 1))+", \n\n"
                            + msg
                            + "\n\nYour Attendance for "+month
                            + ":\nTotal Days:   "+String.valueOf(model.getValueAt(i, 2))
                            + "\nPresent Days: "+String.valueOf(model.getValueAt(i, 3))
                            + "\n\nRegards,\n");
                }
            }

            //test print
            System.out.println("rolls size: "+rolls.size()+"\n"+rolls);
            System.out.println("NAMEs size: "+names.size()+"\n"+names);
        
            //roll of students is searched in package tables and email is collected in 'emails' list 
            con=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_package","sam_user1","pass_sam");
            stmt=con.createStatement();
            
            for(int i=0;i<rolls.size();i++){
                String roll=rolls.get(i);
                INCREMENT_ROLL:for(int k=0;k<packages.size();k++){
                    String package_name=packages.get(k);
                    rs=stmt.executeQuery("select email from "+package_name+" where roll='"+roll+"'");
                    while(rs.next()){
                        emails.add(rs.getString("email"));
                        break INCREMENT_ROLL;
                    }
                }
            }
            
            System.out.println("emails size: "+emails.size()+"\n"+emails);
        
            rs.close();
            stmt.close();
            con.close();
        }
        catch(SQLException err){
            System.out.println("Error_packages121_fr3::"+err.getMessage());
        }
    
        List<String> defaulter=new ArrayList<String>();
        Mailer mailer=new Mailer();
        for(int i=0;i<emails.size();i++){
            String status="";
            if(isEmailValid(emails.get(i))){
                status=mailer.sendMail(emails.get(i), body.get(i), subject);
            }
            if(!status.equals("done")){
                defaulter.add(names.get(i)+" ("+rolls.get(i)+")");
            }
            
            jLabel7.setText("Sending Mail ("+i+"/"+emails.size()+")...");
        }
        int mail_no=emails.size()-defaulter.size();
        jLabel7.setIcon(new ImageIcon());
        if(mail_no==0){
            return false;
        }else{
            jLabel7.setText("Total "+mail_no+" mails sent!");
            if(mail_no==emails.size()){
                JOptionPane.showMessageDialog(this, "All mails sent successfully!!!");
            }else{
                String not_sent="";
                for(String name:defaulter){
                    not_sent+=name+"\n";
                }
                JOptionPane.showMessageDialog(this, "Almost all mail has been sent!\nWe tried hard but still we are unable to send some mails to:\n"+not_sent);
            }
            return true;
        }
    }
    
    boolean setup_table_pdf(boolean local,String record_date, String class_name){
        DefaultTableModel model=(DefaultTableModel) jTable2.getModel();
        String name="";
        String branch="";
        List<String> batch=new ArrayList<String>();
        String batch_str="";
        String year="";
        Connection con; 
        ResultSet rs;
        try {
            con=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_manager","sam_user","pass_sam");
            Statement stmt=con.createStatement();
            
            rs=stmt.executeQuery("Select name from user_details");
            while(rs.next()){
                name=rs.getString("name");
            }
            
            rs=stmt.executeQuery("select PACKAGE_NAME from SERVICE where CLASS_NAME='"+class_name+"'");
            while(rs.next()){
                String package_name=rs.getString("PACKAGE_NAME");
                branch=package_name.substring(0, package_name.length()-5);
                year="20"+package_name.substring(package_name.length()-2, package_name.length());
                batch.add(package_name.substring(package_name.length()-5,package_name.length()-2));
            }
            
            for(int i=0;i<batch.size();i++){
                if(i==0){
                    batch_str="Batch " + batch.get(i);
                }else if(i==batch.size()-1){
                    batch_str=batch_str + " & " + batch.get(i);
                }else{
                    batch_str=batch_str + ", " + batch.get(i);
                }
            }
            //create pdf of the table
            if(local){
                create_table_pdf(true, model, branch, year, batch_str,record_date, name, class_name);
            }else{
                create_table_pdf(false, model, branch, year, batch_str,record_date, name, class_name);
            }
            rs.close();
            stmt.close();
            con.close();
        }
        catch(SQLException err){
            System.out.println("Error_packages1210_fr3::"+err.getMessage());
        }
        return true;
    }
    
    void create_table_pdf(boolean local, DefaultTableModel model, String branch, String year, String batch,String record_date, String name, String class_name){
        
        Date myDate=new Date();
        String prep_date=new SimpleDateFormat("dd/MM/yyyy").format(myDate);
        String dir,file_name;
        if(local){
            dir=FileSystemView.getFileSystemView().getDefaultDirectory().getPath();
            file_name=class_name+"_"+record_date+"_"+new SimpleDateFormat("hh_mm_ss").format(myDate)+".pdf";
        }else{
            dir=FileSystemView.getFileSystemView().getHomeDirectory().getPath();
            file_name="sam_temp.pdf";
        }
        record_date=record_date+", "+new SimpleDateFormat("yyyy").format(myDate);

        Document document = new Document(PageSize.A4);
        
        try {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(dir+"/"+file_name));

            com.itextpdf.text.Font fontStyle1 = FontFactory.getFont(FontFactory.HELVETICA, 22, com.itextpdf.text.Font.BOLD);
            com.itextpdf.text.Font fontStyle2 = FontFactory.getFont(FontFactory.HELVETICA, 16, com.itextpdf.text.Font.NORMAL);

            document.open();

            onStartPage(writer,document);

            Paragraph paragraphOne = new Paragraph("\nAsansol Engineering College", fontStyle1);
            document.add(paragraphOne);

            paragraphOne = new Paragraph("Student Attendance Report", fontStyle2);
            document.add(paragraphOne);
            paragraphOne = new Paragraph("\n", fontStyle2);
            document.add(paragraphOne);

            PdfPTable table1 = new PdfPTable(2); // 3 columns.
            table1.setWidthPercentage(100); //Width 100%
            table1.setSpacingBefore(10f); //Space before table
            table1.setSpacingAfter(10f); //Space after table

            table1.setWidths(new float[]{1f,1f});
            String cell="";
            String value="";
            for(int i=0;i<6;i++){

                if(i==0){
                    cell="Attendance Record of: ";
                    value=record_date;
                }else if(i==1){
                    cell="Date of preparation: ";
                    value=prep_date;
                }else if(i==2){
                    cell="Department: ";
                    value=branch;
                }else if(i==3){
                    cell="Year (Year of Enrolment): ";
                    value=year;
                }else if(i==4){
                    cell="Batch: ";
                    value=batch;
                }else if(i==5){
                    cell="Respective Faculty: ";
                    value=name;
                }

                PdfPCell cell_name = new PdfPCell(new Paragraph(cell));
                PdfPCell cell_value = new PdfPCell(new Paragraph(value));

                cell_name.setPadding(5);
                cell_value.setPadding(5);

                cell_name.setHorizontalAlignment(Element.ALIGN_LEFT);
                cell_value.setHorizontalAlignment(Element.ALIGN_LEFT);

                cell_name.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cell_value.setVerticalAlignment(Element.ALIGN_MIDDLE);

                cell_name.setBorderColor(BaseColor.WHITE);
                cell_value.setBorderColor(BaseColor.WHITE);

                table1.addCell(cell_name);
                table1.addCell(cell_value);
            }

            document.add(table1);

            //add table to pdf
            PdfPTable table = new PdfPTable(5); // 5 columns.
            table.setWidthPercentage(100); //Width 100%
            table.setSpacingBefore(10f); //Space before table
            table.setSpacingAfter(10f); //Space after table

            //Set Column widths
            float[] columnWidths = {0.3f, 1f, 2f, 0.9f, 1.2f};
            table.setWidths(columnWidths);
            for(int i=0;i<model.getRowCount()+1;i++){
                String col1="";
                String col2="ROLL";
                String col3="NAME";
                String col4="TOTAL DAYS";
                String col5="PRESENT DAYS";
                if(i!=0){
                    col1=String.valueOf(i);
                    col2=String.valueOf(model.getValueAt(i-1, 0));
                    col3=String.valueOf(model.getValueAt(i-1, 1));
                    col4=String.valueOf(model.getValueAt(i-1, 2));
                    col5=String.valueOf(model.getValueAt(i-1, 3));
                }
                PdfPCell cell1 = new PdfPCell(new Paragraph(col1));
                PdfPCell cell2 = new PdfPCell(new Paragraph(col2));
                PdfPCell cell3 = new PdfPCell(new Paragraph(col3));
                PdfPCell cell4 = new PdfPCell(new Paragraph(col4));
                PdfPCell cell5 = new PdfPCell(new Paragraph(col5));

                cell1.setBorderColor(BaseColor.WHITE);
                cell2.setBorderColor(BaseColor.WHITE);
                cell3.setBorderColor(BaseColor.WHITE);
                cell4.setBorderColor(BaseColor.WHITE);
                cell5.setBorderColor(BaseColor.WHITE);

                cell1.setPadding(5);
                cell2.setPadding(5);
                cell3.setPadding(5);
                cell4.setPadding(5);
                cell5.setPadding(5);

                cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
                cell2.setHorizontalAlignment(Element.ALIGN_LEFT);
                cell3.setHorizontalAlignment(Element.ALIGN_LEFT);
                cell4.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell5.setHorizontalAlignment(Element.ALIGN_CENTER);

                cell1.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cell2.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cell3.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cell4.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cell5.setVerticalAlignment(Element.ALIGN_MIDDLE);

                table.addCell(cell1);
                table.addCell(cell2);
                table.addCell(cell3);
                table.addCell(cell4);
                table.addCell(cell5);
            }
            document.add(table);
            onEndPage(writer, document);
            document.close();
            writer.close();
            if(local){
                JOptionPane.showMessageDialog(this, "Your PDF record '"+file_name+"' has been created and saved to \n'My Documents' folder (C:/Users/Sanatan Home/Documents).");
                /*try{     
                    Desktop.getDesktop().browse(new URI("file:///"+FileSystemView.getFileSystemView().getDefaultDirectory().getPath()+"/"+file_name));   
    //                Desktop.getDesktop().browse(new URI("file:///C:/Program%20Files%20(x86)/Sybero%20Infotech/MediCellar/MediCellar-PrivacyPolicy.pdf"));
                }*/
                try {
                    File myFile = new File(dir+"/"+file_name);
                    Desktop.getDesktop().open(myFile);
                }catch (IOException ex) {
                    ex.getStackTrace();
                    JOptionPane.showMessageDialog(this, "There is a problem in opening your pdf file. please open it manually!"+ex.getMessage());

                }catch(Exception e){
                    e.getStackTrace();
                    JOptionPane.showMessageDialog(this, "There is a problem in opening your pdf file. please open it manually!"+e.getMessage());
                }
            }else{
                String body="Hi, "
                        + "\nHere is the attendance record of students of:"
                        + "\nBranch:    "+branch
                        + "\nYear:      "+year
                        + "\nBatch:     "+batch
                        + "\n\nthe pdf file of record is attached with this mail."
                        + "\n\nRegards,\n";
                String sub="Attendance Record";
                String status=new Mailer().sendMail(jTextField1.getText(),body,sub, dir+"/"+file_name);
                if(status.equals("done")){
                    JOptionPane.showMessageDialog(this, "Record sent successfully.");
                }else{
                    JOptionPane.showMessageDialog(this, status);
                }
            }
        }
        catch (Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "There is a problem with your request.\n"+e.getMessage());
        }
}
    
    public void onStartPage(PdfWriter writer, Document document) {
        //ColumnText.showTextAligned(writer.getDirectContent(), Element.ALIGN_CENTER, new Phrase("Top Left"), 30, 800, 0);
        ColumnText.showTextAligned(writer.getDirectContent(), Element.ALIGN_CENTER, new Phrase("Generated by e-SAM System"), 500, 800, 0);
    }

    public void onEndPage(PdfWriter writer, Document document) {
        ColumnText.showTextAligned(writer.getDirectContent(), Element.ALIGN_CENTER, new Phrase("http://www.aecwb.edu.in"), 110, 30, 0);
        int i=Integer.valueOf(document.getPageNumber())+1;
        ColumnText.showTextAligned(writer.getDirectContent(), Element.ALIGN_CENTER, new Phrase("Document:" + i), 520, 30, 0);
    }
    
public class myTableCellRenderer extends DefaultTableCellRenderer {
    public Component getTableCellRendererComponent(javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus,int row, int column) {
        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        if (value.equals("A")) {
            c.setForeground(Color.RED);
        }else if(value.equals("_")||value.equals("x")){
            c.setForeground(new Color(180,180,180));
        }else{
            c.setForeground(Color.BLACK);
        }
        
        if(column==34){
            int v=Integer.valueOf(String.valueOf(value));
            if(v>94){
                c.setForeground(Color.GREEN);
            }else if (v<75 && v>50 ) {
                c.setForeground(Color.BLUE);
            }else if (v < 50 ) {
                c.setForeground(Color.RED);
            }else {
                c.setForeground(Color.BLACK);
            }
        }
        
        return c;
    }
}

    public class myNewTableCellRenderer extends DefaultTableCellRenderer {
    public Component getTableCellRendererComponent(javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus,int row, int column) {
        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        
        c.setForeground(Color.BLACK);
        if(column==4){
            int v=Integer.valueOf(String.valueOf(value));
            if(v>94){
                c.setForeground(Color.GREEN);
            }else if (v<75 && v>50 ) {
                c.setForeground(Color.BLUE);
            }else if (v < 50 ) {
                c.setForeground(Color.RED);
            }else {
                c.setForeground(Color.BLACK);
            }
        }
        
        return c;
    }
}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JComboBox jComboBox6;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
