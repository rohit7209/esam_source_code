/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sam;

import java.sql.DatabaseMetaData;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Vector;
import java.awt.Color;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.ComponentInputMap;
import java.awt.Component;
import javax.swing.table.TableCellRenderer;
import javax.swing.JComponent;

import java.util.Date;
import javax.swing.JOptionPane;
import java.sql.*;
import java.io.*;
import java.util.*;
import javax.swing.ImageIcon;
/**
 *
 * @author Sanatan Home
 */
public class attendance extends javax.swing.JPanel {

    /**
     * Creates new form attendance
     */
    
    int glance;
    
    public attendance() {
        initComponents();
          
        glance=1;
        jDateChooser1.setDate(new Date());
        update();
    }
    
    void update(){
        Connection con; 
        ResultSet rs;
        /**/
        
        jComboBox3.removeAllItems();
        try {
            con=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_manager","sam_user","pass_sam");
            Statement stmt=con.createStatement();
            rs=stmt.executeQuery("Select * from SERVICE");
           
            while(rs.next()){
                boolean found=false;
                for(int i=0;i<jComboBox3.getItemCount();i++){
                    if(jComboBox3.getItemAt(i).equals(rs.getString("CLASS_NAME"))){
                       found=true; 
                    }
                }
                if(!found){
                    jComboBox3.addItem(rs.getString("CLASS_NAME"));
                }
            }
            rs.close();
            stmt.close();
            con.close();
        }
        catch(SQLException err){
            System.out.println("Error_packages1_fr::"+err.getMessage());
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();

        buttonGroup1.add(jRadioButton1);
        buttonGroup1.add(jRadioButton2);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setPreferredSize(new java.awt.Dimension(350, 40));

        jDateChooser1.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        jDateChooser1.setMaxSelectableDate(new Date());
        jDateChooser1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jDateChooser1KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jComboBox3.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        jComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(55, 150, 198));
        jLabel3.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        jLabel3.setForeground(java.awt.Color.white);
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("REFRESH NOW");
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel3.setOpaque(true);
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("  ");
        jLabel1.setOpaque(true);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setFont(new java.awt.Font("Segoe UI Semilight", 0, 16)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Roll", "Name", "DAY1", "DAY2", "DAY3", "DAY4", "DAY5", "DAY6", "DAY7", "TODAY", "Attendance %"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(204, 204, 204));
        jTable1.setShowGrid(false);
        jTable1.setShowVerticalLines(true);
        jTable1.setRowHeight(22);
        /*jTable1.setOpaque(true);
        jTable1.setFillsViewportHeight(true);
        jTable1.setBackground(new Color(255, 255, 255));
        jTable1.getTableHeader().setBackground(new Color(255, 255, 255));*/
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(150);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(150);
            jTable1.getColumnModel().getColumn(1).setMinWidth(180);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(180);
            jTable1.getColumnModel().getColumn(1).setMaxWidth(180);
            jTable1.getColumnModel().getColumn(9).setMinWidth(100);
            jTable1.getColumnModel().getColumn(9).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(9).setMaxWidth(100);
            jTable1.getColumnModel().getColumn(10).setMinWidth(100);
            jTable1.getColumnModel().getColumn(10).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(10).setMaxWidth(100);
        }

        jCheckBox1.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox1.setFont(new java.awt.Font("Segoe UI Semilight", 0, 11)); // NOI18N
        jCheckBox1.setText("Mark this day as NOT WORKING Day");
        jCheckBox1.setFocusable(false);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(55, 150, 198));
        jLabel2.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        jLabel2.setForeground(java.awt.Color.white);
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("SAVE/UPDATE");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.setOpaque(true);
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jRadioButton1.setBackground(new java.awt.Color(255, 255, 255));
        jRadioButton1.setFont(new java.awt.Font("Segoe UI Semilight", 0, 11)); // NOI18N
        jRadioButton1.setText("Mark All");
        jRadioButton1.setFocusable(false);
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setBackground(new java.awt.Color(255, 255, 255));
        jRadioButton2.setFont(new java.awt.Font("Segoe UI Semilight", 0, 11)); // NOI18N
        jRadioButton2.setText("Unmark All");
        jRadioButton2.setFocusable(false);
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addGap(134, 134, 134)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 980, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jRadioButton1)
                        .addComponent(jRadioButton2))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox3ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3ItemStateChanged
    
    java.util.List<String> package_names=new java.util.ArrayList<String>();
        
    java.util.List<String> table_list=new java.util.ArrayList<String>();
        
    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
            package_names.clear();
            //table_list.clear();
            String class_name=String.valueOf(jComboBox3.getSelectedItem());
            Connection con;
            ResultSet rs;
            try {
                //select the names of all related packages and stores it in a list
                con=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_manager","sam_user","pass_sam");
                Statement stmt=con.createStatement();
                rs=stmt.executeQuery("Select PACKAGE_NAME from service where class_name='"+class_name+"'");
                while(rs.next()){
                    package_names.add(rs.getString("PACKAGE_NAME"));
                }
                
                rs.close();
                stmt.close();
                con.close();
            }
            catch(SQLException err){
                System.out.println("Error_packages1209_fr3::"+err.getMessage());
            }
            new table_loader().start();
    }//GEN-LAST:event_jComboBox3ActionPerformed
    
    void load_table(){
        Connection con;
        ResultSet rs;
        try {
            con=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_record","sam_user","pass_sam");
            Statement stmt=con.createStatement();
            
            int day=Integer.valueOf(new SimpleDateFormat("dd").format(jDateChooser1.getDate()));
            String date_string=new SimpleDateFormat("MMyy").format(jDateChooser1.getDate());
                
            List<String> last_days=new ArrayList();
            for(int j=1;j<=7;j++){
                if(day-j>0){
                    last_days.add("DAY"+String.valueOf(day-j));
                }else{
                    last_days.add("NA");
                }
            }
            String today="";
            String prev_day=last_days.get(0);
            if(new SimpleDateFormat("dd/MM/yyyy").format(jDateChooser1.getDate()).equals(new SimpleDateFormat("dd/MM/yyyy").format(new Date()))){
                today="TODAY";
            }else if(prev_day.equals("NA")){
                today="DAY1";
            }else{
                today="DAY"+String.valueOf(Integer.valueOf(prev_day.substring(3))+1);
            }
            
            jTable1.setModel (new MyTableModel(last_days.get(6),last_days.get(5),last_days.get(4),last_days.get(3),last_days.get(2),last_days.get(1),last_days.get(0),today));
            
            
            MyTableModel model=(MyTableModel) jTable1.getModel();
            model.setNumRows(0);
            for(int i=0;i<package_names.size();i++){
                String table_name=package_names.get(i)+date_string;
                
                DatabaseMetaData dbm=con.getMetaData();
                rs=dbm.getTables(null, null, "%", new String[] {"TABLE"});
                boolean found=false;
        
                while(rs.next()){
                    if(rs.getString(3).equals(table_name)){
                        found=true;
                    }
                }
                if(found){
                    rs=stmt.executeQuery("select * from "+table_name);
                    while(rs.next()){
                        String percentage="";
                        try{
                            percentage=String.valueOf((int)((float)rs.getInt("PRESENT_DAYS")/(float)rs.getInt("TOTAL_DAYS")*100));
                        }catch(Exception e){
                            percentage="100";
                        }
                        boolean switcher=true;
                        if(rs.getString("DAY"+day).equals("a")){
                            switcher=false;
                        }
                        
                        String day1,day2,day3,day4,day5,day6,day7;
                        try{
                            day1=rs.getString(last_days.get(6));
                        }catch(Exception e){
                            day1="_";
                        }
                        try{
                            day2=rs.getString(last_days.get(5));
                        }catch(Exception e){
                            day2="_";
                        }
                        try{
                            day3=rs.getString(last_days.get(4));
                        }catch(Exception e){
                            day3="_";
                        }
                        try{
                            day4=rs.getString(last_days.get(3));
                        }catch(Exception e){
                            day4="_";
                        }
                        try{
                            day5=rs.getString(last_days.get(2));
                        }catch(Exception e){
                            day5="_";
                        }
                        try{
                            day6=rs.getString(last_days.get(1));
                        }catch(Exception e){
                            day6="_";
                        }
                        try{
                            day7=rs.getString(last_days.get(0));
                        }catch(Exception e){
                            day7="_";
                        }
                        model.addRow(new Object[]{rs.getString("roll"),rs.getString("name"),day1,day2,day3,day4,day5,day6,day7,switcher,percentage});
                    }
                }
                else{
                    create_table(table_name, package_names.get(i));
                    rs=stmt.executeQuery("select * from "+table_name);
                    while(rs.next()){
                        String percentage="";
                        try{
                            percentage=String.valueOf((int)((float)rs.getInt("PRESENT_DAYS")/(float)rs.getInt("TOTAL_DAYS")*100));
                        }catch(Exception e){
                            percentage="100";
                        }
                        boolean switcher=true;
                        if(rs.getString("Day"+day).equals("a")){
                            switcher=false;
                        }
                        
                        String day1,day2,day3,day4,day5,day6,day7;
                        try{
                            day1=rs.getString(last_days.get(6));
                        }catch(Exception e){
                            day1="_";
                        }
                        try{
                            day2=rs.getString(last_days.get(5));
                        }catch(Exception e){
                            day2="_";
                        }
                        try{
                            day3=rs.getString(last_days.get(4));
                        }catch(Exception e){
                            day3="_";
                        }
                        try{
                            day4=rs.getString(last_days.get(3));
                        }catch(Exception e){
                            day4="_";
                        }
                        try{
                            day5=rs.getString(last_days.get(2));
                        }catch(Exception e){
                            day5="_";
                        }
                        try{
                            day6=rs.getString(last_days.get(1));
                        }catch(Exception e){
                            day6="_";
                        }
                        try{
                            day7=rs.getString(last_days.get(0));
                        }catch(Exception e){
                            day7="_";
                        }
                        model.addRow(new Object[]{rs.getString("roll"),rs.getString("name"),day1,day2,day3,day4,day5,day6,day7,switcher,percentage});
                    }
                }
            }
            jCheckBox1.setSelected(false);
            jRadioButton1.setEnabled(true);
            jRadioButton2.setEnabled(true);
            
            stmt.close();
            con.close();
        }
        catch(SQLException err){
            System.out.println("Error_packages1_fr3::"+err.getMessage());
        }catch(Exception e){
            System.out.println("Error_packages1_fr4::"+e.getMessage());
            e.getStackTrace();
        }
    }
    
    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        jLabel2.setText("Updating...");
        jLabel2.setForeground(new Color(55,150,198));
        jLabel2.setBackground(Color.white);
        jLabel2.setIcon(new ImageIcon(getClass().getResource("images/ring-alt.gif")));
        new update_loader().start();
    }//GEN-LAST:event_jLabel2MouseClicked
    
    void updateRecord(){
        DefaultTableModel model=(DefaultTableModel) jTable1.getModel();
        Connection con;
        ResultSet rs;
        String date_string=new SimpleDateFormat("MMyy").format(jDateChooser1.getDate());
        int day=Integer.valueOf(new SimpleDateFormat("dd").format(jDateChooser1.getDate()));
        for(int i=0;i<package_names.size();i++){
            String table_name=package_names.get(i)+date_string;
            //make connection with record database to find table with name 'table_name'
            try {
                con=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_record","sam_user","pass_sam");
                Statement stmt=con.createStatement();

                for(int j=0;j<model.getRowCount();j++){

                    if(!jCheckBox1.isSelected()){
                        if(String.valueOf(model.getValueAt(j, 9)).equals("true")){
                            rs=stmt.executeQuery(""
                                    + "SELECT DAY"+day+" "
                                    + "FROM "+table_name+" "
                                    + "where roll='"+String.valueOf(model.getValueAt(j, 0))+"'");
                            String k1="";
                            String k2="";

                            while(rs.next()){
                                String t=rs.getString("DAY"+day);
                                if(t.equals("n")){
                                    k1="+1";
                                    k2="+1";
                                }else if(t.equals("a")){
                                    k1="+0";
                                    k2="+1";
                                }else if(t.equals("p")){
                                    k1="+0";
                                    k2="+0";
                                }
                            }
                            stmt.executeUpdate("update "+table_name+" "
                                 + "SET DAY"+day+"='p', "
                                 + "MNTH_TOTAL_DAYS=MNTH_TOTAL_DAYS"+k1+", "
                                 + "MNTH_PRESENT_DAYS=MNTH_PRESENT_DAYS"+k2+", "
                                 + "TOTAL_DAYS=TOTAL_DAYS"+k1+", "
                                 + "PRESENT_DAYS=PRESENT_DAYS"+k2+" "
                                 + "where roll='"+String.valueOf(model.getValueAt(j, 0))+"'");

                        }else{
                            rs=stmt.executeQuery(""
                                    + "SELECT DAY"+day+" "
                                    + "FROM "+table_name+" "
                                    + "where roll='"+String.valueOf(model.getValueAt(j, 0))+"'");
                            String k1="";
                            String k2="";

                            while(rs.next()){
                                String t=rs.getString("DAY"+day);
                                if(t.equals("n")){
                                    k1="+1";
                                    k2="+0";
                                }else if(t.equals("a")){
                                    k1="+0";
                                    k2="+0";
                                }else if(t.equals("p")){
                                    k1="+0";
                                    k2="-1";
                                }
                            } 
                            stmt.executeUpdate("update "+table_name+" "
                                 + "SET DAY"+day+"='a', "
                                 + "MNTH_TOTAL_DAYS=MNTH_TOTAL_DAYS"+k1+", "
                                 + "MNTH_PRESENT_DAYS=MNTH_PRESENT_DAYS"+k2+", "
                                 + "TOTAL_DAYS=TOTAL_DAYS"+k1+", "
                                 + "PRESENT_DAYS=PRESENT_DAYS"+k2+" "
                                 + "where roll='"+String.valueOf(model.getValueAt(j, 0))+"'");
                        }
                    }else{
                        rs=stmt.executeQuery(""
                                + "SELECT DAY"+day+" "
                                + "FROM "+table_name+" "
                                + "where roll='"+String.valueOf(model.getValueAt(j, 0))+"'");
                        String k1="";
                        String k2="";

                        while(rs.next()){
                            String t=rs.getString("DAY"+day);
                            if(t.equals("n")){
                                k1="+0";
                                k2="+0";
                            }else if(t.equals("a")){
                                k1="-1";
                                k2="+0";
                            }else if(t.equals("p")){
                                k1="-1";
                                k2="-1";
                            }
                        }
                        stmt.executeUpdate("update "+table_name+" "
                             + "SET DAY"+day+"='n', "
                             + "MNTH_TOTAL_DAYS=MNTH_TOTAL_DAYS"+k1+", "
                             + "MNTH_PRESENT_DAYS=MNTH_PRESENT_DAYS"+k2+", "
                             + "TOTAL_DAYS=TOTAL_DAYS"+k1+", "
                             + "PRESENT_DAYS=PRESENT_DAYS"+k2+" "
                             + "where roll='"+String.valueOf(model.getValueAt(j, 0))+"'");
                    }
                }
                stmt.close();
                con.close();
            }
            catch(SQLException e){
                System.out.println(e.getMessage());
                e.getStackTrace();
            }
        }
        
        jTable1.setEnabled(true);
        jRadioButton1.setEnabled(true);
        jRadioButton2.setEnabled(true);
        mark_ND=false;
        showUpdateMsg();
    }
    
    void showUpdateMsg(){
        JOptionPane.showMessageDialog(this, "The Record has been updated successfully.");
    }
    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
        String cur_year=new SimpleDateFormat("yyyy").format(new Date());
        String sel_year=new SimpleDateFormat("yyyy").format(jDateChooser1.getDate());
        if(cur_year.equals(sel_year)){
            new table_loader().start();
        }else{
            JOptionPane.showMessageDialog(this, "Only current year attendance can be accessed/updated!");
        }
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model=(DefaultTableModel) jTable1.getModel();
        for(int i=0;i<model.getRowCount();i++){
            model.setValueAt(false, i, 9);
        }
    }//GEN-LAST:event_jRadioButton2ActionPerformed
    
    boolean mark_ND=false;
    
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        if(!mark_ND){
            jTable1.setEnabled(false);
            jRadioButton1.setEnabled(false);
            jRadioButton2.setEnabled(false);
            mark_ND=true;
        }else{
            jTable1.setEnabled(true);
            jRadioButton1.setEnabled(true);
            jRadioButton2.setEnabled(true);
            mark_ND=false;
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model=(DefaultTableModel) jTable1.getModel();
        
        for(int i=0;i<model.getRowCount();i++){
            model.setValueAt(true, i, 9);
        }
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jDateChooser1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jDateChooser1KeyTyped
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, jDateChooser1.getDate());
        System.out.println(jDateChooser1.getDate());
    }//GEN-LAST:event_jDateChooser1KeyTyped
 
    void create_table(String table_name, String package_name){
                System.out.println("creating table");
               try{
                Connection con=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_record","sam_user","pass_sam");
                Statement stmt=con.createStatement();
                    
                    stmt.executeUpdate("CREATE TABLE "+table_name+" ("
                            + "ROLL varchar(255) primary key, "
                            + "NAME varchar(255), "
                            + "DAY1 varchar(255) DEFAULT 'n', "
                            + "DAY2 varchar(255) DEFAULT 'n', "
                            + "DAY3 varchar(255) DEFAULT 'n', "
                            + "DAY4 varchar(255) DEFAULT 'n', "
                            + "DAY5 varchar(255) DEFAULT 'n', "
                            + "DAY6 varchar(255) DEFAULT 'n', "
                            + "DAY7 varchar(255) DEFAULT 'n', "
                            + "DAY8 varchar(255) DEFAULT 'n', "
                            + "DAY9 varchar(255) DEFAULT 'n', "
                            + "DAY10 varchar(255) DEFAULT 'n', "
                            + "DAY11 varchar(255) DEFAULT 'n', "
                            + "DAY12 varchar(255) DEFAULT 'n', "
                            + "DAY13 varchar(255) DEFAULT 'n', "
                            + "DAY14 varchar(255) DEFAULT 'n', "
                            + "DAY15 varchar(255) DEFAULT 'n', "
                            + "DAY16 varchar(255) DEFAULT 'n', "
                            + "DAY17 varchar(255) DEFAULT 'n', "
                            + "DAY18 varchar(255) DEFAULT 'n', "
                            + "DAY19 varchar(255) DEFAULT 'n', "
                            + "DAY20 varchar(255) DEFAULT 'n', "
                            + "DAY21 varchar(255) DEFAULT 'n', "
                            + "DAY22 varchar(255) DEFAULT 'n', "
                            + "DAY23 varchar(255) DEFAULT 'n', "
                            + "DAY24 varchar(255) DEFAULT 'n', "
                            + "DAY25 varchar(255) DEFAULT 'n', "
                            + "DAY26 varchar(255) DEFAULT 'n', "
                            + "DAY27 varchar(255) DEFAULT 'n', "
                            + "DAY28 varchar(255) DEFAULT 'n', "
                            + "DAY29 varchar(255) DEFAULT 'n', "
                            + "DAY30 varchar(255) DEFAULT 'n', "
                            + "DAY31 varchar(255) DEFAULT 'n', "
                            + "MNTH_TOTAL_DAYS Integer DEFAULT 0, "
                            + "MNTH_PRESENT_DAYS Integer DEFAULT 0, "
                            + "TOTAL_DAYS Integer DEFAULT 0, "
                            + "PRESENT_DAYS Integer DEFAULT 0"
                            + ")");
                    
                    System.out.println("created table");
                    List<String> prev_table=new ArrayList();
                    boolean prev_found=false;
                    int index=Integer.valueOf(table_name.substring(table_name.length()-4,table_name.length()-2));
                    System.out.println("c_index: "+index);
                    
                    if(index>1){
                        for(int i=2;i<=index;i++){
                            prev_table.add(table_name.substring(0,table_name.length()-5) + String.valueOf(Integer.valueOf(table_name.substring(table_name.length()-5,table_name.length()))-(i-1)*100));
                            prev_found=true;
                            System.out.println("prev_table: "+prev_table);
                        }
                    }
                    
                    ResultSet rs1;
                    if(prev_found){
                        boolean found=false;
                        for(int i=0;i<prev_table.size();i++){
                            DatabaseMetaData dbm=con.getMetaData();
                            rs1=dbm.getTables(null, null, "%", new String[] {"TABLE"});
                    
                            System.out.println("in prev_found for: "+i);
                    
                            while(rs1.next()){
                            System.out.println("in prev_found while: "+prev_table.get(i));
                    
                                if(rs1.getString(3).equals(String.valueOf(prev_table.get(i)))){
                                    found=true;
                                    index=i;
                            System.out.println("in rs1 if: "+rs1.getString(3)+" "+index);
                                }
                            }
                            if(found){
                                System.out.println("breaking... : ");
                                break;
                            }
                        }
                        if(found){
                            int rows=stmt.executeUpdate("INSERT INTO "+table_name+" (roll, name, present_days, total_days) "
                                                        + "SELECT roll,name,present_days,total_days FROM "+prev_table.get(index)+"");
                            System.out.println(rows+" affected!");
                        }else{
                            Connection con1=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_package","sam_user1","pass_sam");
                            Statement statement = con1.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);  

                            String sql = "INSERT INTO "+table_name+" (roll,name) VALUES(?,?)";
                            PreparedStatement pstmt = con.prepareStatement(sql);

                            rs1 = statement.executeQuery("SELECT roll,name FROM "+package_name);
                            while(rs1.next()){  
                                pstmt.setString(1, rs1.getString(1));          
                                pstmt.setString(2, rs1.getString(2));   
                                pstmt.executeUpdate();
                                System.out.println(rs1.getString(1)+", "+rs1.getString(2));
                            }
                            con1.close();
                        }
                    }else{
                        Connection con1=(Connection)DriverManager.getConnection("jdbc:derby://localhost:1527/sam_package","sam_user1","pass_sam");
                        Statement statement = con1.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);  

                        String sql = "INSERT INTO "+table_name+" (roll,name) VALUES(?,?)";
                        PreparedStatement pstmt = con.prepareStatement(sql);

                        rs1 = statement.executeQuery("SELECT roll,name FROM "+package_name);
                        while(rs1.next()){  
                            pstmt.setString(1, rs1.getString(1));          
                            pstmt.setString(2, rs1.getString(2));   
                            pstmt.executeUpdate();
                            System.out.println(rs1.getString(1)+", "+rs1.getString(2));
                        }
                        con1.close();
                    }
               }
               catch(SQLException e){
                   System.out.println(e.getMessage());
                   e.getStackTrace();
               }
    }
    
    public class MyTableModel extends DefaultTableModel {

    public MyTableModel(String D1,String D2,String D3,String D4,String D5,String D6,String D7,String Today) {
        
      super(new String[]{"Roll", "Student Name",D1,D2,D3,D4,D5,D6,D7,Today, "OverAll Attendance %"}, 0);
    }

    @Override
    public Class<?> getColumnClass(int columnIndex) {
      Class clazz = String.class;
      switch (columnIndex) {
        case 9:
          clazz = Boolean.class;
          break;
      }
      return clazz;
    }

    @Override
    public boolean isCellEditable(int row, int column) {
      return column == 9;
    }

    @Override
    public void setValueAt(Object aValue, int row, int column) {
      if (aValue instanceof Boolean && column == 9) {
        System.out.println(aValue);
        Vector rowData = (Vector)getDataVector().get(row);
        rowData.set(9, (boolean)aValue);
        fireTableCellUpdated(row, column);
      }
    }    
  }

    String month_index(String month){
        if(month.equalsIgnoreCase("January")){
            return "01";
        }else if(month.equalsIgnoreCase("February")){
            return "02";
        }else if(month.equalsIgnoreCase("March")){
            return "03";
        }else if(month.equalsIgnoreCase("April")){
            return "04";
        }else if(month.equalsIgnoreCase("May")){
            return "05";
        }else if(month.equalsIgnoreCase("June")){
            return "06";
        }else if(month.equalsIgnoreCase("July")){
            return "07";
        }else if(month.equalsIgnoreCase("August")){
            return "08";
        }else if(month.equalsIgnoreCase("September")){
            return "09";
        }else if(month.equalsIgnoreCase("October")){
            return "10";
        }else if(month.equalsIgnoreCase("November")){
            return "11";
        }else if(month.equalsIgnoreCase("December")){
            return "12";
        }else{
            return "00";
        }
    }
    
    String month(int i){
        if(i==1){
            return "January";
        }else if(i==2){
            return "February";
        }else if(i==3){
            return "March";
        }else if(i==4){
            return "April";
        }else if(i==5){
            return "May";
        }else if(i==6){
            return "June";
        }else if(i==7){
            return "July";
        }else if(i==8){
            return "August";
        }else if(i==9){
            return "September";
        }else if(i==10){
            return "October";
        }else if(i==11){
            return "November";
        }
        else if(i==12){
            return "December";
        }else{
            return null;
        }
    }
    
public class myTableCellRenderer extends DefaultTableCellRenderer {
    public Component getTableCellRendererComponent(javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus,int row, int column) {
        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        if (value.equals("a")) {
            c.setForeground(Color.RED);
        }else if(value.equals("_") || value.equals("n")){
            c.setForeground(new Color(180,180,180));
        }else if(value.equals("p")){
            c.setForeground(Color.black);
        }
        else{
            c.setForeground(Color.BLACK);
        }
        
        if(column==10){
            int v=Integer.valueOf(String.valueOf(value));
            if(v>=95){
                c.setForeground(Color.GREEN);
            }else if (v<75 && v>=50 ) {
                c.setForeground(Color.BLUE);
            }else if (v < 50 ) {
                c.setForeground(Color.RED);
            }else {
                c.setForeground(Color.BLACK);
            }
        }
        
        return c;
    }
}

class table_loader extends Thread{
    public void run(){
        load_table();
        jTable1.setDefaultRenderer(Object.class, new myTableCellRenderer());
    }
}

class update_loader extends Thread{
    public void run(){
        updateRecord();
        jLabel2.setText("SAVE/UPDATE");
        jLabel2.setBackground(new Color(55,150,198));
        jLabel2.setForeground(Color.white);
        jLabel2.setIcon(new ImageIcon());
        jLabel3MouseClicked(null);
    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox3;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
